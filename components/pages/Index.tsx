import styles from "../../styles/Home.module.css";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { Ingredient, Recipe } from "../../utils/types";
import {
  addToDb,
  deleteFromDb,
  getAllFromDb,
  getIngredientsByCategory,
} from "../../utils/storage/localStore";
import RecipeCard from "./recipes/components/RecipeCard";
import CupboardCard from "./cupboard/components/CupboardCard";

function Index(): JSX.Element {
  const [loading, setLoading] = useState(true);
  const [recipes, setRecipes] = useState<Recipe[]>([]);
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  const [sortedIngredients, setSortedIngredients] = useState<{
    [p: string]: Ingredient[];
  }>({});

  useEffect(() => {
    const runAsync = async () => {
      setRecipes((await getAllFromDb("recipe")) as Recipe[]);
      setIngredients((await getAllFromDb("ingredient")) as Ingredient[]);
    };
    setLoading(true);
    runAsync().then(() => {
      setLoading(false);
    });
  }, []);

  let recipeCards;

  const getRecipes = async () => {
    setRecipes((await getAllFromDb("recipe")) as Recipe[]);
  };

  async function handleDeleteRecipe(recipe: Recipe) {
    await deleteFromDb(recipe.id, "recipe").then(() => {
      const temp = [...recipes];
      temp.splice(recipes.indexOf(recipe), 1);
      setRecipes([...temp]);
    });
  }
  async function handleDeleteIngredient(ingredient: Ingredient) {
    await deleteFromDb(ingredient.id, "ingredient").then(() => {
      const temp = [...ingredients];
      temp.splice(ingredients.indexOf(ingredient), 1);
      setIngredients([...temp]);
    });
  }

  async function handleChange(ingredient: Ingredient) {
    const temp = [...ingredients];

    for (let i = 0; i < temp.length; i += 1) {
      if (temp[i].id === ingredient.id) {
        temp[i] = ingredient;
      }
    }
    setIngredients(temp);
    setSortedIngredients(getIngredientsByCategory(temp));

    await addToDb(ingredient, "ingredient").then(() => {});
  }

  recipeCards = recipes.map((recipe) => {
    return (
      <div
        key={recipe.id}
        className={
          "snap-start h-full w-[180px] h-[180px] min-h-[180px] min-w-[180px]"
        }
      >
        <RecipeCard
          key={recipe.id + 1}
          recipe={recipe}
          handleDelete={handleDeleteRecipe}
          getRecipes={getRecipes}
          setRecipes={setRecipes}
        />
      </div>
    );
  });
  let ingredientCards;
  ingredientCards = ingredients.map((ingredient) => {
    return (
      <div key={ingredient.id} className={"snap-start mx-2"}>
        <CupboardCard
          handleDelete={handleDeleteIngredient}
          ingredient={ingredient}
          handleChange={handleChange}
        />
      </div>
    );
  });

  if (loading) {
    return <div>loading...</div>;
  } else {
    return (
      <div>
        <Head>
          <title>Kitchen Companion!</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className={"m-8 mb-32"}>
          <div className={"sticky-width mx-auto"}>
            <div>
              <div className={"flex flex-row justify-between mb-4"}>
                <div className={"text-3xl"}>Your Recipes</div>
                <Link href={"/recipes"}>
                  <button className={"bg-gray-100 rounded-full px-4"}>
                    View All
                  </button>
                </Link>
              </div>

              <div
                className={
                  "flex snap-x scroll-px-4 snap-proximity gap-2 px-2 h-full overflow-x-auto rounded-lg py-2 bg-gray-400"
                }
              >
                {recipeCards}
              </div>
            </div>
            <div className={"mt-8"}>
              <div className={"flex flex-row justify-between mb-4"}>
                <div className={"text-3xl"}>Your Cupboard</div>
                <Link href={"/cupboard"}>
                  <button className={"bg-gray-100 rounded-full px-4"}>
                    View All
                  </button>
                </Link>
              </div>
              <div
                className={
                  "flex flex-col gap-2 snap-y gap-2 py-2 scroll-py-2 snap-proximity overflow-y-auto h-64 rounded-lg bg-gray-400"
                }
              >
                {ingredientCards}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

export default Index;
